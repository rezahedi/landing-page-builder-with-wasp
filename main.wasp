app landingPageBuilderWithWasp {
  wasp: {
    version: "^0.10.2"
  },
  title: "landing-page-builder-with-wasp",
  auth: {
    // Expects entity User to have (username:String) and (password:String) fields.
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      // We also support Google and GitHub, with more on the way!
      // usernameAndPassword: {},
      google: {},
      email: {
        fromField: {
          name: "My App Postman",
          email: "r.zahedi@gmail.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@server/auth/email.js",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@server/auth/email.js",
        },
        allowUnverifiedLogin: false
      }
    },
    // We'll see how this is used a bit later
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
  emailSender: {
    provider: SendGrid,
    defaultFrom: {
        name: "Reza Zahedi",
        email: "r.zahedi@gmail.com"
    },
  }
}


route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import Main from "@client/MainPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordReset } from "@client/pages/auth/RequestPasswordReset",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordReset } from "@client/pages/auth/PasswordReset",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerification } from "@client/pages/auth/EmailVerification",
}

route EditorRoute { path: "/editor/:id(\\d+)", to: EditorPage }
page EditorPage {
  authRequired: true,
  component: import Editor from "@client/pages/Editor"
}


entity Pages {=psl
    id                        Int           @id @default(autoincrement())
    title                     String
    description               String
    slug                      String        @unique
    isPublished               Boolean       @default(false)
    user                      User?         @relation(fields: [userId], references: [id])
    userId                    Int?
psl=}

entity User {=psl
    id                        Int           @id @default(autoincrement())
    email                     String?       @unique
    password                  String?
    isEmailVerified           Boolean       @default(false)
    emailVerificationSentAt   DateTime?
    passwordResetSentAt       DateTime?
    externalAuthAssociations  SocialLogin[]
    pages                     Pages[]
    // homepageId                Pages?        @relation(fields: [homepageId], references: [id])
psl=}

entity SocialLogin {=psl
  id                          Int           @id @default(autoincrement())
  provider                    String
  providerId                  String
  user                        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                      Int
  createdAt                   DateTime      @default(now())
  @@unique([provider, providerId, userId])
psl=}


query getPages {
  // We specify that JS implementation of the query (which is an async JS function)
  // can be found in `src/server/queries.js` as the named export `getTasks`.
  // Use '@server' to reference files inside the src/server folder.
  fn: import { getPages } from "@server/queries.js",
  // We tell Wasp that this query is doing something with entity `Task`. With that, Wasp will
  // automatically refresh the results of this query when tasks change.
  entities: [Pages]
}

query getPage {
  fn: import { getPage } from "@server/queries.js",
  entities: [Pages]
}


action createPage {
  fn: import { createPage } from "@server/actions.js",
  entities: [Pages]
}

action updatePage {
  fn: import { updatePage } from "@server/actions.js",
  entities: [Pages]
}